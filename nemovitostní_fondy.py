
import pandas as pd
import streamlit as st
import streamlit.components.v1 as components
from pandas.api.types import (
    is_categorical_dtype,
    is_datetime64_any_dtype,
    is_numeric_dtype,
    is_object_dtype,
)
import streamlit as st
from PIL import Image
import base64
import io

st.set_page_config(
    page_title="P≈ôehled nemovitostn√≠ch fond≈Ø e15",
    page_icon="‚ú®",
    layout="wide"
)

from streamlit.components.v1 import html

# Custom HTML and CSS
custom_html = """
<div style="margin-bottom: 0px; display: flex; align-items: center; justify-content: space-between;">
    <h1 style="font-family: 'IBM Plex Sans', sans-serif; font-size: 20px; font-weight: 600; color: #262730; margin-right: 30px; margin: 0px;">Fondy kvalifikovan√Ωch investor≈Ø</h1>
    <a href="https://fullscreen-fki.streamlit.app/" target="_blank" title="Otev≈ôi fullscreen aplikace">
        <img src="https://cdn1.iconfinder.com/data/icons/material-core/14/fullscreen-512.png" alt="Fullscreen" style="height: 30px; width: 30px;">
    </a>
</div>
"""

# Inject the custom HTML into Streamlit
html(custom_html,height=60)

# Load the data
@st.cache_data
def load_data():
    df = pd.read_csv("FKI_fondy_streamlit.csv")
    return df

df = load_data()

df.rename(columns={'Rozlo≈æen√≠ portfolia':"Portfolio"},inplace=True)

df["N√°zev fondu"] = df["N√°zev fondu"] + " üí¨"

# Convert image to Base64
def image_to_base64(img_path, output_size=(441, 100)):
    # Open an image file
    with Image.open(img_path) as img:
        # Resize image
        img = img.resize(output_size)
        # Convert image to PNG and then to base64
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        return f"data:image/png;base64,{base64.b64encode(buffered.getvalue()).decode()}"
    

# Apply conversion function to the column with image paths
df["Poskytovatel"] = df["Poskytovatel"].apply(image_to_base64)


# Nahraƒète NaN hodnoty "Neuvedeno"
df["C√≠len√Ω roƒçn√≠ v√Ωnos"].fillna("- - -", inplace=True)
df["Vstupn√≠ poplatek"].fillna("- - -", inplace=True)
df["Mana≈æersk√Ω poplatek"].fillna("- - -", inplace=True)
df["V√Ωkonnostn√≠ poplatek"].fillna("- - -", inplace=True)
df["V√Ωstupn√≠ poplatek"].fillna("- - -", inplace=True)
df["Lh≈Øta pro zpƒõtn√Ω odkup"].fillna("- - -", inplace=True)
df["Portfolio"].fillna("- - -", inplace=True)


def convert_yield_to_float(yield_value):
    if yield_value == "- - -":
        return -1
    if isinstance(yield_value, str):
        # Pokud obsahuje rozsah, vytvo≈ô√≠me kombinovanou hodnotu
        if '-' in yield_value:
            first_val, second_val = map(lambda x: float(x.replace('%', '').strip()), yield_value.split('-'))
            # Vrac√≠me kombinovanou hodnotu
            return first_val + second_val * 0.01
        # Odeberte procenta a p≈ôeveƒète na float
        yield_value = yield_value.replace('%', '').replace(',', '.').strip()
        # Pokud obsahuje '+', p≈ôid√°me malou hodnotu pro ≈ôazen√≠
        if '+' in yield_value:
            yield_value = yield_value.replace('+', '').strip()
            return float(yield_value) + 0.001  # p≈ôid√°me 0.001 pro ≈ôazen√≠
        else:
            return float(yield_value)
    return None


def extract_number_from_string(s):
    numbers = re.findall(r"(\d+)", s)
    if numbers:
        return int(numbers[0])
    return 0



# Zbytek k√≥du z≈Øst√°v√° stejn√Ω

# Se≈ôazen√≠ hodnot ve sloupci "C√≠len√Ω roƒçn√≠ v√Ωnos"
sorted_yield_values = sorted(df["C√≠len√Ω roƒçn√≠ v√Ωnos"].unique(), key=convert_yield_to_float)


import re

def dominant_category(text):
    # Vytvo≈ôte slovn√≠k s kl√≠ƒçov√Ωmi slovy pro ka≈ædou kategorii
    categories = {
        "kancel√°≈ôsk√©": ["kancel√°≈ôsk√©", "kancel√°≈ô","kancel√°≈ôe", "administrativn√≠","office"],
        "v√Ωrobn√≠": ["v√Ωrobn√≠", "v√Ωroba"],
        "logistick√©": ["logistika", "logistick√©","logistika a v√Ωroba"],
        "obchodn√≠": ["obchodn√≠"],
        "retail": ["retail"],
        "rezidenƒçn√≠": ["rezidenƒçn√≠"],
        "pr≈Ømysl/logistika": ["pr≈Ømysl/logistika"]
    }
    
    # Pokud text nen√≠ ≈ôetƒõzec, vra≈• "Nezn√°m√©"
    if not isinstance(text, str):
        return "Nezn√°m√©"
    
    # Rozdƒõlen√≠ ≈ôetƒõzce na jednotliv√© p√°ry (procento, kategorie)
    pairs = re.findall(r'(\d+\.?\d* %) ([\w\s]+)', text)
    dominant_percentage = 0
    dominant_category = None
    
    # Pro ka≈æd√Ω p√°r extrakce procenta a identifikace kategorie
    for percentage, category in pairs:
        percentage = float(percentage.replace(' %', '').replace(',', '.'))
        for key, keywords in categories.items():
            if any(keyword in category for keyword in keywords):
                if percentage > dominant_percentage:
                    dominant_percentage = percentage
                    dominant_category = key
                    


    # Pokud dominantn√≠ kategorie nem√° v√≠ce ne≈æ 50 %, vra≈• "Vyrovnan√©"
    if dominant_percentage <= 50:
        return "Vyrovnan√©"
    elif dominant_category:
        return f"P≈ôeva≈æuje {dominant_category}"
    else:
        return "jin√©"


df["Rozlo≈æen√≠ portfolia"] = df["Portfolio"].apply(dominant_category)


def convert_fee_to_float_simple(fee_value):
    if isinstance(fee_value, str):
        # O≈ô√≠zne ≈ôetƒõzec na z√°kladƒõ prvn√≠ z√°vorky (pokud existuje)
        fee_value = fee_value.split('(')[0].strip()

        # Zkus√≠me extrahovat ƒç√≠sla z ≈ôetƒõzce
        numbers = re.findall(r"(\d+\.?\d*)", fee_value)
        if not numbers:  # pokud nejsou ≈æ√°dn√° ƒç√≠sla, vr√°t√≠me -1 (nebo jinou n√°hradn√≠ hodnotu)
            return -1

        if '%' in fee_value:
            # Pokud obsahuje v√≠ce ƒç√°st√≠ oddƒõlen√Ωch ƒç√°rkami, vezmeme prvn√≠ ƒç√°st
            fee_value = fee_value.split(',')[0].strip()
            
            # Pokud obsahuje rozsah, vytvo≈ô√≠me kombinovanou hodnotu
            if '-' in fee_value:
                fee_parts = fee_value.split('-')
                # Vezmeme prvn√≠ ƒç√≠slo z rozsahu
                return float(fee_parts[0].replace('%', '').strip())
            
            # Extrakce ƒç√≠sla ze stringu
            fee_value = numbers[0]
            return float(fee_value)
    return -1  # Pokud nedostaneme ≈æ√°dnou platnou hodnotu, vr√°t√≠me -1 (nebo jinou n√°hradn√≠ hodnotu)

df['U≈æivatelsk√Ω v√Ωbƒõr'] = False

df_original = df.copy()

fee_columns = ["Vstupn√≠ poplatek", "Mana≈æersk√Ω poplatek", "V√Ωkonnostn√≠ poplatek", "V√Ωstupn√≠ poplatek"]


def filter_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """
    Adds a UI on top of a dataframe to let viewers filter columns

    Args:
        df (pd.DataFrame): Original dataframe

    Returns:
        pd.DataFrame: Filtered dataframe
    """
    modify1 = st.toggle("P≈ôidat filtrov√°n√≠", key="checkbox1")

    if not modify1:
        return df

    df = df.copy()

    # Try to convert datetimes into a standard format (datetime, no timezone)
    for col in df.columns:
        if is_object_dtype(df[col]):
            try:
                df[col] = pd.to_datetime(df[col])
            except Exception:
                pass

        if is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.tz_localize(None)

    modification_container = st.container()

    with modification_container:
        # Skryjeme sloupec "Portfolio" v nab√≠dce

        columns_to_exclude = ["Portfolio", "V√Ωnos 2022", "V√Ωnos 2021", "V√Ωnos 2020", "V√Ωnos od zalo≈æen√≠", "TER", "LTV", "YIELD", "WAULT", "NAV (v mld. Kƒç)","N√°zev fondu","U≈æivatelsk√Ω v√Ωbƒõr"]
        available_columns = [col for col in df.columns if col not in columns_to_exclude]
        to_filter_columns = st.multiselect("Filtrovat p≈ôehled podle:", available_columns, placeholder="Vybrat finanƒçn√≠ ukazatel")

        if len(to_filter_columns) > 2:
            st.warning("V tomto filtru m≈Ø≈æete vybrat pouze 2 finanƒçn√≠ ukazatele. Rozs√°hlej≈°√≠ filtrov√°n√≠ je dostupn√© ve fullscreenu (‚õ∂) aplikace.")
            to_filter_columns = []  # Reset the selection

        for column in to_filter_columns:
            left, right = st.columns((1, 20))

            if column == "Rozlo≈æen√≠ portfolia":
                unique_portfolio_values = df[column].dropna().unique()
                user_portfolio_input = right.multiselect(
                "Rozlo≈æen√≠ portfolia",
                unique_portfolio_values,
                default=list(unique_portfolio_values)
                )
                df = df[df[column].isin(user_portfolio_input)]
                df["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                continue
            
            if column == "C√≠len√Ω roƒçn√≠ v√Ωnos":
                user_yield_input = right.multiselect(
                    "C√≠len√Ω roƒçn√≠ v√Ωnos",
                    sorted_yield_values,
                    default=sorted_yield_values  # ve v√Ωchoz√≠m stavu oznaƒçit v≈°echny hodnoty
                )
                df = df[df["C√≠len√Ω roƒçn√≠ v√Ωnos"].isin(user_yield_input)]
                df["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                continue  # pokraƒçujte dal≈°√≠m sloupcem
            
            # Pro poplatky - pou≈æijeme specifick√© ≈ôazen√≠
            if column in fee_columns:
                sorted_fee_values = sorted(df[column].dropna().unique(), key=convert_fee_to_float_simple)
                user_fee_input = right.multiselect(
                    column,
                    sorted_fee_values,
                    default=list(sorted_fee_values)
                )
                df = df[df[column].isin(user_fee_input)]
                df["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                continue  # pokraƒçujte dal≈°√≠m sloupcem
            
            # Pro Min. investice
            if column == "Min. investice":
                unique_values = [val for val in df[column].dropna().unique() if val != "1 mil. Kƒç nebo 125 tis. euro"]
                user_cat_input = right.multiselect(
                    column,
                    unique_values,
                    default=list(unique_values)
                )
                if "1 mil. Kƒç" in user_cat_input:
                    user_cat_input.append("1 mil. Kƒç nebo 125 tis. euro")
                df = df[df[column].isin(user_cat_input)]
                df["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                continue  # pokraƒçujte dal≈°√≠m sloupcem

            if column == "Lh≈Øta pro zpƒõtn√Ω odkup":
                    unique_values = sorted(df[column].dropna().unique(), key=extract_number_from_string)
                    user_cat_input = right.multiselect(
                    column,
                    unique_values,
                    default=list(unique_values)
                )
                    df = df[df[column].isin(user_cat_input)]
                    df["U≈æivatelsk√Ω v√Ωbƒõr"] = True

            if df[column].apply(lambda x: not pd.api.types.is_number(x)).any():
                unique_values = df[column].dropna().unique()

            elif is_numeric_dtype(df[column]):
                _min = df[column].min()
                _max = df[column].max()
                if pd.notna(_min) and pd.notna(_max):
                    _min = float(_min)
                    _max = float(_max)

                    # Pou≈æit√≠ st.number_input pro zad√°n√≠ rozsahu
                    user_num_input = right.number_input(
                        f"{column} - Zadejte minim√°ln√≠ hodnotu",
                        min_value=_min,
                        max_value=_max,
                        value=_min,  # Nastav√≠me minim√°ln√≠ hodnotu jako v√Ωchoz√≠
                        step=0.01,   # P≈ôizp≈Øsobte krok podle va≈°ich pot≈ôeb
                    )

                    # Z√≠sk√°n√≠ zadan√© minim√°ln√≠ hodnoty
                    min_val = user_num_input

                    user_num_input = right.number_input(
                        f"{column} - Zadejte maxim√°ln√≠ hodnotu",
                        min_value=_min,  # P≈ôizp≈Øsobte minim√°ln√≠ hodnotu podle zadan√©ho min_val
                        max_value=_max,
                        value=_max,      # Nastav√≠me maxim√°ln√≠ hodnotu jako v√Ωchoz√≠
                        step=0.01,       # P≈ôizp≈Øsobte krok podle va≈°ich pot≈ôeb
                    )

                    # Z√≠sk√°n√≠ zadan√© maxim√°ln√≠ hodnoty
                    max_val = user_num_input

                    df = df[df[column].between(min_val, max_val)]
                    df["U≈æivatelsk√Ω v√Ωbƒõr"] = True

            elif is_datetime64_any_dtype(df[column]):
                user_date_input = right.date_input(
                    column,
                    value=(
                        df[column].min(),
                        df[column].max(),
                    ),
                )
                if len(user_date_input) == 2:
                    user_date_input = tuple(map(pd.to_datetime, user_date_input))
                    start_date, end_date = user_date_input
                    df = df.loc[df[column].between(start_date, end_date)]
            else:
                user_text_input = right.text_input(
                    f"Substring or regex in {column}",
                )
                if user_text_input:
                    df = df[df[column].astype(str).str.contains(user_text_input)]
 
    return df




df.rename(columns={"V√Ωnos 2022 (v %)":"V√Ωnos 2022 ","V√Ωnos 2021 (v %)":"V√Ωnos 2021 ","V√Ωnos 2020 (v %)":"V√Ωnos 2020 ","V√Ωnos od zalo≈æen√≠ (% p.a.)":"V√Ωnos od zalo≈æen√≠ ","TER (v %)":"TER ","LTV (v %)":"LTV ","YIELD (v %)":"YIELD ",
                   "WAULT":"WAULT ","NAV (v mld. Kƒç)":"NAV "},inplace=True)


df.info()

def get_emoji(value):
    if value >= 10:
        return "üîπ"
    elif value >= 5:
        return "üî∏"
    elif value < 5:
        return "üí¢"
    else:
        return "‚ñ´"

import numpy as np

# Vytvo≈ôte nov√Ω sloupec kombinuj√≠c√≠ emoji a hodnotu 'V√Ωnos 2022'
df['V√Ωnos 2022'] = df['V√Ωnos 2022 '].apply(lambda x: f"{get_emoji(x)} {x:.2f} %" if not np.isnan(x) else "‚ñ´Ô∏è - - -")
df['V√Ωnos 2021'] = df['V√Ωnos 2021 '].apply(lambda x: f"{get_emoji(x)} {x:.2f} %" if not np.isnan(x) else "‚ñ´Ô∏è - - -")
df['V√Ωnos 2020'] = df['V√Ωnos 2020 '].apply(lambda x: f"{get_emoji(x)} {x:.2f} %" if not np.isnan(x) else "‚ñ´Ô∏è - - -")
df['V√Ωnos od zalo≈æen√≠'] = df['V√Ωnos od zalo≈æen√≠ '].apply(lambda x: f"{get_emoji(x)} {x:.2f} % p.a." if not np.isnan(x) else "‚ñ´Ô∏è - - -")

df["TER"] = df["TER "].apply(lambda x: "- - -" if pd.isna(x) else f"{x:.2f} %")
df["LTV"] = df["LTV "].apply(lambda x: "- - -" if pd.isna(x) else f"{x:.2f} %")
df["YIELD"] = df["YIELD "].apply(lambda x: "- - -" if pd.isna(x) else f"{x:.2f} %")

df["WAULT"] = df["WAULT "].apply(lambda x: "- - -" if pd.isna(x) else f"{x:.2f}")
df["NAV (v mld. Kƒç)"] = df["NAV "].apply(lambda x: "- - -" if pd.isna(x) else f"{x:.2f}")



# Configure the image column
image_column = st.column_config.ImageColumn(label="Poskytovatel", width="medium")
min_invest_column = st.column_config.TextColumn(help="üìç**Minim√°ln√≠ nutn√° ƒç√°stka pro vstup do fondu.** Kl√≠ƒçov√© zejm√©na u FKI, kde je vƒõt≈°inou 1 mil. Kƒç p≈ôi splnƒõn√≠ testu vhodnosti, ale nƒõkdy i 2 a v√≠ce milion≈Ø.")
poplatky_column = st.column_config.TextColumn(help="üìç**ƒåasto p≈ôehl√≠≈æen√©, ale pro fin√°ln√≠ v√Ωnos z√°sadn√≠ jsou poplatky.** Je t≈ôeba zn√°t podm√≠nky pro v√Ωstupn√≠ poplatky v r≈Øzn√Ωch ƒçasov√Ωch horizontech ‚Äì zejm√©na ty m≈Ø≈æe investor ovlivnit.")


vynosNAV_column = st.column_config.TextColumn(label="NAV (v mld. Kƒç) üí¨",help="üìç**NAV (AUM): Hodnota majetku fondu ukazuje na robustnost a vlo≈æenou d≈Øvƒõru investor≈Ø.**")
vynosTER_column = st.column_config.TextColumn(label="TER üí¨", help="üìç**TER: Celkov√© roƒçn√≠ n√°klady na spr√°vu fondu.** ƒå√≠m ni≈æ≈°√≠, t√≠m lep≈°√≠ pro investory.")
vynosLTV_column = st.column_config.TextColumn(label="LTV üí¨", help="üìç**LTV: Loan to value ‚Äì pomƒõr ciz√≠ho kapit√°lu k hodnotƒõ nemovitosti.** Vy≈°≈°√≠ LTV pom√°h√° fond≈Øm dosahovat vy≈°≈°√≠ch v√Ωnos≈Ø, ale z√°rove≈à je t≈ôeba ≈ô√≠ct, ≈æe vƒõt≈°√≠ √∫vƒõrov√© zat√≠≈æen√≠ s sebou nese i vƒõt≈°√≠ riziko, kdyby se nƒõjak dramaticky zvedly √∫roky z √∫vƒõru nebo propadly p≈ô√≠jmy z pron√°jmu ")
vynosYIELD_column = st.column_config.TextColumn(label="YIELD üí¨", help="üìç**YIELD: Pomƒõr ƒçist√©ho roƒçn√≠ho n√°jmu a hodnoty nemovitost√≠.** Pokud pomƒõ≈ô√≠te ƒçist√Ω roƒçn√≠ n√°jem celkovou hodnotou nemovitost√≠, zjist√≠te, jakou rentabilitu ty nemovitosti maj√≠, aneb jak√© hrub√© v√Ωnosy dok√°≈æe fond generovat z n√°jmu. Na detailu ka≈æd√©ho fondu najdete tento √∫daj ji≈æ vypoƒçten√Ω pod ukazatelem ‚ÄûYield‚Äú. Zpravidla to b√Ωv√° mezi 5-7 % p.a. ")
vynosWAULT_column = st.column_config.TextColumn(label="WAULT (v letech) üí¨", help="üìç**WAULT: Pr≈Ømƒõrn√° doba do konce n√°jemn√≠ch smluv.** Jak dlouh√© m√° v pr≈Ømƒõru n√°jemn√≠ smlouvy, respektive jak√° je pr≈Ømƒõrn√° v√°≈æen√° doba do konce platnosti n√°jemn√≠ch smluv.")

nazev_column = st.column_config.TextColumn(label="N√°zev fondu üí¨", width="medium", help="üìç**Po kliknut√≠ na fond zjist√≠te dal≈°√≠ podrobnosti.**")

pocet_nemov_column = st.column_config.NumberColumn(label="Poƒçet nemovitost√≠")

rozlozeni_column = st.column_config.TextColumn(label="Rozlo≈æen√≠ portfolia")

df.set_index('Poskytovatel', inplace=True)


filtered_df = filter_dataframe(df)
filtered_df.sort_values("V√Ωnos 2022",ascending=False,inplace=True)

# Seznam sloupc≈Ø, kter√© chcete p≈ôesunout na zaƒç√°tek
cols_to_move = ["N√°zev fondu",'V√Ωnos 2022','V√Ωnos 2021',"V√Ωnos 2020","V√Ωnos od zalo≈æen√≠","C√≠len√Ω roƒçn√≠ v√Ωnos","Min. investice","Vstupn√≠ poplatek","Mana≈æersk√Ω poplatek","V√Ωkonnostn√≠ poplatek","V√Ωstupn√≠ poplatek","TER","Lh≈Øta pro zpƒõtn√Ω odkup",
                "LTV","WAULT","YIELD","NAV (v mld. Kƒç)","Poƒçet nemovitost√≠","Portfolio"]

# Z√≠sk√°n√≠ seznamu v≈°ech sloupc≈Ø v DataFrame a odstranƒõn√≠ sloupc≈Ø, kter√© chcete p≈ôesunout na zaƒç√°tek
remaining_cols = [col for col in df.columns if col not in cols_to_move]

# Kombinov√°n√≠ obou seznam≈Ø k vytvo≈ôen√≠ nov√©ho po≈ôad√≠ sloupc≈Ø
new_order = cols_to_move + remaining_cols

# P≈ôeuspo≈ô√°d√°n√≠ sloupc≈Ø v DataFrame
filtered_df = filtered_df[new_order]

filtered_df.info()

if not filtered_df.empty:
    st.dataframe(filtered_df.drop(columns=["Rozlo≈æen√≠ portfolia","V√Ωnos 2022 ","V√Ωnos 2021 ","V√Ωnos 2020 ","V√Ωnos od zalo≈æen√≠ ","TER ","LTV ","YIELD ","WAULT ","NAV ","U≈æivatelsk√Ω v√Ωbƒõr"]), hide_index=True, 
                 column_config={"Poskytovatel": image_column,
                                "TER":vynosTER_column,
                                "LTV":vynosLTV_column,
                                "YIELD": vynosYIELD_column,
                                "Poƒçet nemovitost√≠":pocet_nemov_column,
                                "N√°zev fondu":nazev_column,
                                "Portfolio":rozlozeni_column,
                                "NAV (v mld. Kƒç)":vynosNAV_column,
                                "WAULT":vynosWAULT_column,
                                "Min. investice":min_invest_column,
                                "Vstupn√≠ poplatek":poplatky_column,
                                "Mana≈æersk√Ω poplatek":poplatky_column,
                                "V√Ωkonnostn√≠ poplatek":poplatky_column,
                                "V√Ωstupn√≠ poplatek":poplatky_column,
                                }, height=428)
else:
    st.warning("≈Ω√°dn√° data neodpov√≠daj√≠ zvolen√Ωm filtr≈Øm.")

st.markdown("""
    <style>
    .custom-font {
        font-size: 14px;  # Zmƒõ≈àte velikost podle pot≈ôeby
    }
    </style>
    <div class='custom-font'>
        üí¢ v√Ωnos men≈°√≠ ne≈æ 5 % üî∏ v√Ωnos mezi 5 % a≈æ 10 % üîπ v√Ωnos nad 10 % ‚ñ´Ô∏è nezn√°m√Ω v√Ωnos
    </div>
    """, unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

##### Retailove fondy
st.markdown("<br>", unsafe_allow_html=True)
retail_html = """
<div style="margin-bottom: 0px; display: flex; align-items: center; justify-content: space-between;">
    <h1 style="font-family: 'IBM Plex Sans', sans-serif; font-size: 20px; font-weight: 600; color: #262730; margin-right: 30px; margin: 0px;">Retailov√© fondy</h1>
</div>
"""

# Inject the custom HTML into Streamlit
html(retail_html,height=60)

# Load the data
@st.cache_data
def load_data():
    df_retail = pd.read_csv("Retail_fondy_streamlit.csv")
    return df_retail

df_retail = load_data()

df_retail.rename(columns={'Rozlo≈æen√≠ portfolia':"Portfolio"},inplace=True)

df_retail["N√°zev fondu"] = df_retail["N√°zev fondu"] + " üí¨"

# Apply conversion function to the column with image paths
df_retail["Poskytovatel"] = df_retail["Poskytovatel"].apply(image_to_base64)

df_retail.info()


# Nahraƒète NaN hodnoty "Neuvedeno"

df_retail["Rok vzniku fondu"] = df_retail["Rok vzniku fondu"].replace("- - -", np.nan).fillna("- - -")
df_retail.loc[df_retail["Rok vzniku fondu"] != "- - -", "Rok vzniku fondu"] = df_retail[df_retail["Rok vzniku fondu"] != "- - -"]["Rok vzniku fondu"].astype(float).astype(int)

df_retail["Vstupn√≠ poplatek"].fillna("- - -", inplace=True)
df_retail["Mana≈æersk√Ω poplatek"].fillna("- - -", inplace=True)
df_retail["V√Ωkonnostn√≠ poplatek"].fillna("- - -", inplace=True)
df_retail["V√Ωstupn√≠ poplatek"].fillna("- - -", inplace=True)
df_retail["Portfolio"].fillna("- - -", inplace=True)




df_retail["Rozlo≈æen√≠ portfolia"] = df_retail["Portfolio"].apply(dominant_category)


fee_columns = ["Vstupn√≠ poplatek", "Mana≈æersk√Ω poplatek", "V√Ωkonnostn√≠ poplatek", "V√Ωstupn√≠ poplatek"]

df_retail['U≈æivatelsk√Ω v√Ωbƒõr'] = False

df_retail_original = df_retail.copy()


def filter_dataframe(df_retail: pd.DataFrame) -> pd.DataFrame:
    """
    Adds a UI on top of a dataframe to let viewers filter columns

    Args:
        df_retail (pd.DataFrame): Original dataframe

    Returns:
        pd.DataFrame: Filtered dataframe
    """
    modify2 = st.toggle("P≈ôidat filtrov√°n√≠", key="checkbox2")

    if not modify2:
            return df_retail

    # Try to convert datetimes into a standard format (datetime, no timezone)
    else: 
        for col in df_retail.columns:
            if is_object_dtype(df_retail[col]):
                try:
                    df_retail[col] = pd.to_datetime(df_retail[col])
                except Exception:
                    pass

            if is_datetime64_any_dtype(df_retail[col]):
                df_retail[col] = df_retail[col].dt.tz_localize(None)

        modification_container = st.container()

        with modification_container:
            # Skryjeme sloupec "Portfolio" v nab√≠dce

            columns_to_exclude = ["Portfolio", "V√Ωnos 2022", "V√Ωnos 2021", "V√Ωnos 2020", "V√Ωnos od zalo≈æen√≠", "NAV (v mld. Kƒç)","N√°zev fondu"]
            available_columns = [col for col in df_retail.columns if col not in columns_to_exclude]
            to_filter_columns = st.multiselect("Filtrovat p≈ôehled podle:", available_columns, placeholder="Vybrat finanƒçn√≠ ukazatel")

            if len(to_filter_columns) > 2:
                st.warning("V tomto filtru m≈Ø≈æete vybrat pouze 2 finanƒçn√≠ ukazatele. Rozs√°hlej≈°√≠ filtrov√°n√≠ je dostupn√© ve fullscreenu (‚õ∂) aplikace.")
                to_filter_columns = []  # Reset the selection
            
            for column in to_filter_columns:
                left, right = st.columns((1, 20))

                if column == "Rozlo≈æen√≠ portfolia":
                    unique_portfolio_values = df_retail[column].dropna().unique()
                    user_portfolio_input = right.multiselect(
                    "Rozlo≈æen√≠ portfolia",
                    unique_portfolio_values,
                    default=list(unique_portfolio_values)
                    )
                    df_retail = df_retail[df_retail[column].isin(user_portfolio_input)]
                    df_retail["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                    continue
                
                # Pro poplatky - pou≈æijeme specifick√© ≈ôazen√≠
                if column in fee_columns:
                    sorted_fee_values = sorted(df_retail[column].dropna().unique(), key=convert_fee_to_float_simple)
                    user_fee_input = right.multiselect(
                        column,
                        sorted_fee_values,
                        default=list(sorted_fee_values)
                    )
                    df_retail = df_retail[df_retail[column].isin(user_fee_input)]
                    df_retail["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                    continue  # pokraƒçujte dal≈°√≠m sloupcem
                # When creating the filter UI for this column:          
                if column == "Rok vzniku fondu":
                    unique_years = [val for val in df_retail[column].dropna().unique() if val != "- - -"]
                    min_year = min(unique_years)
                    max_year = max(unique_years)
                    user_year_input = right.slider(
                    column,
                    min_value=min_year,
                    max_value=max_year,
                    value=(min_year, max_year)
                    )
                    df_retail["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                    df_retail = df_retail[df_retail[column].between(*user_year_input)]
                    continue  # pokraƒçujte dal≈°√≠m sloupcem
                # Pro Min. investice
                if column == "Min. investice":
                    unique_values = [val for val in df_retail[column].dropna().unique() if val != "1 mil. Kƒç nebo 125 tis. euro"]
                    user_cat_input = right.multiselect(
                        column,
                        unique_values,
                        default=list(unique_values)
                    )
                    if "1 mil. Kƒç" in user_cat_input:
                        user_cat_input.append("1 mil. Kƒç nebo 125 tis. euro")
                    df_retail = df_retail[df_retail[column].isin(user_cat_input)]
                    df_retail["U≈æivatelsk√Ω v√Ωbƒõr"] = True
                    continue  # pokraƒçujte dal≈°√≠m sloupcem

                if df_retail[column].apply(lambda x: not pd.api.types.is_number(x)).any():
                    unique_values = df_retail[column].dropna().unique()

                elif is_numeric_dtype(df_retail[column]):
                    _min = df_retail[column].min()
                    _max = df_retail[column].max()
                    if pd.notna(_min) and pd.notna(_max):
                        _min = float(_min)
                        _max = float(_max)

                        # Pou≈æit√≠ st.number_input pro zad√°n√≠ rozsahu
                        user_num_input = right.number_input(
                            f"{column} - Zadejte minim√°ln√≠ hodnotu",
                            min_value=_min,
                            max_value=_max,
                            value=_min,  # Nastav√≠me minim√°ln√≠ hodnotu jako v√Ωchoz√≠
                            step=0.01,   # P≈ôizp≈Øsobte krok podle va≈°ich pot≈ôeb
                        )

                        # Z√≠sk√°n√≠ zadan√© minim√°ln√≠ hodnoty
                        min_val = user_num_input

                        user_num_input = right.number_input(
                            f"{column} - Zadejte maxim√°ln√≠ hodnotu",
                            min_value=_min,  # P≈ôizp≈Øsobte minim√°ln√≠ hodnotu podle zadan√©ho min_val
                            max_value=_max,
                            value=_max,      # Nastav√≠me maxim√°ln√≠ hodnotu jako v√Ωchoz√≠
                            step=0.01,       # P≈ôizp≈Øsobte krok podle va≈°ich pot≈ôeb
                        )

                        # Z√≠sk√°n√≠ zadan√© maxim√°ln√≠ hodnoty
                        max_val = user_num_input

                        df_retail = df_retail[df_retail[column].between(min_val, max_val)]
                        df_retail["U≈æivatelsk√Ω v√Ωbƒõr"] = True

                elif is_datetime64_any_dtype(df_retail[column]):
                    user_date_input = right.date_input(
                        column,
                        value=(
                            df_retail[column].min(),
                            df_retail[column].max(),
                        ),
                    )
                    if len(user_date_input) == 2:
                        user_date_input = tuple(map(pd.to_datetime, user_date_input))
                        start_date, end_date = user_date_input
                        df_retail = df_retail.loc[df_retail[column].between(start_date, end_date)]
                else:
                    user_text_input = right.text_input(
                        f"Substring or regex in {column}",
                    )
                    if user_text_input:
                        df_retail = df_retail[df_retail[column].astype(str).str.contains(user_text_input)]
    
    return df_retail




df_retail.rename(columns={"V√Ωnos 2022 (v %)":"V√Ωnos 2022 ","V√Ωnos 2021 (v %)":"V√Ωnos 2021 ","V√Ωnos 2020 (v %)":"V√Ωnos 2020 ","V√Ωnos od zalo≈æen√≠ (% p.a.)":"V√Ωnos od zalo≈æen√≠ ","NAV (v mld. Kƒç)":"NAV "},inplace=True)


df_retail.info()

def get_emoji(value):
    if value >= 10:
        return "üîπ"
    elif value >= 5:
        return "üî∏"
    elif value < 5:
        return "üí¢"
    else:
        return "‚ñ´"


# Vytvo≈ôte nov√Ω sloupec kombinuj√≠c√≠ emoji a hodnotu 'V√Ωnos 2022'
df_retail['V√Ωnos 2022'] = df_retail['V√Ωnos 2022 '].apply(lambda x: f"{get_emoji(x)} {x:.2f} %" if not np.isnan(x) else "‚ñ´Ô∏è - - -")
df_retail['V√Ωnos 2021'] = df_retail['V√Ωnos 2021 '].apply(lambda x: f"{get_emoji(x)} {x:.2f} %" if not np.isnan(x) else "‚ñ´Ô∏è - - -")
df_retail['V√Ωnos 2020'] = df_retail['V√Ωnos 2020 '].apply(lambda x: f"{get_emoji(x)} {x:.2f} %" if not np.isnan(x) else "‚ñ´Ô∏è - - -")
df_retail['V√Ωnos od zalo≈æen√≠'] = df_retail['V√Ωnos od zalo≈æen√≠ '].apply(lambda x: f"{get_emoji(x)} {x:.2f} % p.a." if not np.isnan(x) else "‚ñ´Ô∏è - - -")

df_retail["NAV (v mld. Kƒç)"] = df_retail["NAV "].apply(lambda x: "- - -" if pd.isna(x) else f"{x:.2f}")


# Configure the image column
image_column = st.column_config.ImageColumn(label="Poskytovatel", width="medium")
rok_vzniku_fondu_column = st.column_config.NumberColumn(format="%d")
min_invest_column = st.column_config.TextColumn(help="üìç**Minim√°ln√≠ nutn√° ƒç√°stka pro vstup do fondu.** Kl√≠ƒçov√© zejm√©na u FKI, kde je vƒõt≈°inou 1 mil. Kƒç p≈ôi splnƒõn√≠ testu vhodnosti, ale nƒõkdy i 2 a v√≠ce milion≈Ø.")
poplatky_column = st.column_config.TextColumn(help="üìç**ƒåasto p≈ôehl√≠≈æen√©, ale pro fin√°ln√≠ v√Ωnos z√°sadn√≠ jsou poplatky.** Je t≈ôeba zn√°t podm√≠nky pro v√Ωstupn√≠ poplatky v r≈Øzn√Ωch ƒçasov√Ωch horizontech ‚Äì zejm√©na ty m≈Ø≈æe investor ovlivnit.")


vynosNAV_column = st.column_config.TextColumn(label="NAV (v mld. Kƒç) üí¨",help="üìç**NAV (AUM): Hodnota majetku fondu ukazuje na robustnost a vlo≈æenou d≈Øvƒõru investor≈Ø.**")


pocet_nemov_column = st.column_config.NumberColumn(label="Poƒçet nemovitost√≠")

nazev_column = st.column_config.TextColumn(label="N√°zev fondu üí¨", width="medium", help="üìç**Po kliknut√≠ na fond zjist√≠te dal≈°√≠ podrobnosti.**")
rozlozeni_column = st.column_config.TextColumn(label="Rozlo≈æen√≠ portfolia")

df_retail.set_index('Poskytovatel', inplace=True)


filtered_df_retail = filter_dataframe(df_retail)
filtered_df_retail.sort_values("V√Ωnos 2022 ",ascending=False,inplace=True)


# Seznam sloupc≈Ø, kter√© chcete p≈ôesunout na zaƒç√°tek
cols_to_move = ["N√°zev fondu",'V√Ωnos 2022','V√Ωnos 2021',"V√Ωnos 2020","V√Ωnos od zalo≈æen√≠","Rok vzniku fondu","Min. investice","Vstupn√≠ poplatek","Mana≈æersk√Ω poplatek","V√Ωkonnostn√≠ poplatek","V√Ωstupn√≠ poplatek",
                "NAV (v mld. Kƒç)","Poƒçet nemovitost√≠","Portfolio"]

# Z√≠sk√°n√≠ seznamu v≈°ech sloupc≈Ø v DataFrame a odstranƒõn√≠ sloupc≈Ø, kter√© chcete p≈ôesunout na zaƒç√°tek
remaining_cols = [col for col in df_retail.columns if col not in cols_to_move]

# Kombinov√°n√≠ obou seznam≈Ø k vytvo≈ôen√≠ nov√©ho po≈ôad√≠ sloupc≈Ø
new_order = cols_to_move + remaining_cols

# P≈ôeuspo≈ô√°d√°n√≠ sloupc≈Ø v DataFrame
filtered_df_retail = filtered_df_retail[new_order]


if not filtered_df_retail.empty:
    st.dataframe(filtered_df_retail.drop(columns=["Rozlo≈æen√≠ portfolia","V√Ωnos 2022 ","V√Ωnos 2021 ","V√Ωnos 2020 ","V√Ωnos od zalo≈æen√≠ ","NAV ","U≈æivatelsk√Ω v√Ωbƒõr"]), hide_index=True, 
                 column_config={
                     "Poskytovatel": image_column,
                     "Poƒçet nemovitost√≠": pocet_nemov_column,
                     "N√°zev fondu": nazev_column,
                     "Portfolio": rozlozeni_column,
                     "NAV (v mld. Kƒç)": vynosNAV_column,
                     "Min. investice": min_invest_column,
                     "Vstupn√≠ poplatek": poplatky_column,
                     "Mana≈æersk√Ω poplatek": poplatky_column,
                     "V√Ωkonnostn√≠ poplatek": poplatky_column,
                     "V√Ωstupn√≠ poplatek": poplatky_column,
                     "Rok vzniku fondu": rok_vzniku_fondu_column
                 }, height=638)
else:
    st.warning("≈Ω√°dn√° data neodpov√≠daj√≠ zvolen√Ωm filtr≈Øm.")

if any(filtered_df_retail["U≈æivatelsk√Ω v√Ωbƒõr"].apply(lambda x: x == False)) and any(filtered_df["U≈æivatelsk√Ω v√Ωbƒõr"].apply(lambda x: x == False)):
    st.markdown("<br>", unsafe_allow_html=True)
    st.subheader("Legenda")
    st.markdown("<br>", unsafe_allow_html=True)
    with st.expander(":orange[**Co znamen√° jak√Ω finanƒçn√≠ ukazatel?**]",expanded=True):
        st.write("")
        st.write("üìç**NAV (AUM)**: Hodnota majetku fondu ukazuje na robustnost a vlo≈æenou d≈Øvƒõru investor≈Ø.")
        st.write("üìç**TER: Celkov√© roƒçn√≠ n√°klady na spr√°vu fondu.** ƒå√≠m ni≈æ≈°√≠, t√≠m lep≈°√≠ pro investory.")
        st.write("üìç**LTV: Loan to value ‚Äì pomƒõr ciz√≠ho kapit√°lu k hodnotƒõ nemovitosti.** Vy≈°≈°√≠ LTV pom√°h√° fond≈Øm dosahovat vy≈°≈°√≠ch v√Ωnos≈Ø, ale z√°rove≈à je t≈ôeba ≈ô√≠ct, ≈æe vƒõt≈°√≠ √∫vƒõrov√© zat√≠≈æen√≠ s sebou nese i vƒõt≈°√≠ riziko, kdyby se nƒõjak dramaticky zvedly √∫roky z √∫vƒõru nebo propadly p≈ô√≠jmy z pron√°jmu.")
        st.write("üìç**YIELD: Pomƒõr ƒçist√©ho roƒçn√≠ho n√°jmu a hodnoty nemovitost√≠.** Pokud pomƒõ≈ô√≠te ƒçist√Ω roƒçn√≠ n√°jem celkovou hodnotou nemovitost√≠, zjist√≠te, jakou rentabilitu ty nemovitosti maj√≠, aneb jak√© hrub√© v√Ωnosy dok√°≈æe fond generovat z n√°jmu. Na detailu ka≈æd√©ho fondu najdete tento √∫daj ji≈æ vypoƒçten√Ω pod ukazatelem ‚ÄûYield‚Äú. Zpravidla to b√Ωv√° mezi 5-7 % p.a. ")
        st.write("üìç**WAULT: Pr≈Ømƒõrn√° doba do konce n√°jemn√≠ch smluv.** Jak dlouh√© m√° v pr≈Ømƒõru n√°jemn√≠ smlouvy, respektive jak√° je pr≈Ømƒõrn√° v√°≈æen√° doba do konce platnosti n√°jemn√≠ch smluv.")



# Styling
st.markdown("""
<style>
.portal-navigator {
    padding-left: .5em;
    display: flex;
    justify-items: center;
    align-items: center;
    justify-content: center;
    background-color: white;
    color: #404040;
    height: 1.5em;
    border-radius: 6px;
    position: absolute;
    top: 3px;
    right: 3px;
    opacity: 1;
    z-index: 999;
    filter: drop-shadow(rgba(0, 0, 0, 0.3) 0 2px 10px);
}

.portal-navigator > a {
    margin-right: .5em;
    color: #069;
    text-decoration: underline;
    cursor: pointer; /* P≈ôid√°n√≠ kurzoru jako ruky pro odkazy */
}
</style>
""", unsafe_allow_html=True)

# Script to add links
html("""
<script>
function add_navigator_to_portal(doc) {
    portal = doc.getElementById('portal');
    observer = new MutationObserver(function(mutations, observer) {
        let entry = portal.querySelector('.clip-region');
        if (entry) {
            let text = entry.textContent;
            let span = document.createElement('span');
            span.className = "portal-navigator";
            if (text.includes("Creditas Nemovitostn√≠ I üí¨")) {
                span.innerHTML = '<a href="https://www.creditasfondy.cz/fund/creditas-nemovitostni-i" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Raiffeisen nemovitostn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://www.rb.cz/osobni/zhodnoceni-uspor/investice/podilove-fondy/raiffeisen-realitni-fond" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Mint I. rezidenƒçn√≠ fond  üí¨")) {
                span.innerHTML = '<a href="https://www.mintrezidencnifond.cz/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("ZFP realitn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://www.zfpinvest.com/portfolio/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Sch√∂nfeld & Co Pr√©miov√© nemovitosti üí¨")) {
                span.innerHTML = '<a href="https://www.schonfeldfondy.cz/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("IAD Korunov√Ω realitn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://iad.sk/cs/podilove-fondy/fond/korunovy-realitni-fond/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Generali Fond Realit  üí¨")) {
                span.innerHTML = '<a href="https://www.generali-investments.cz/produkty/investice-v-czk/fondy/generali-fond-realit.html" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("NEMO Fund üí¨")) {
                span.innerHTML = '<a href="https://www.fondnemo.cz/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("ZDR Investments Public Real Estate üí¨")) {
                span.innerHTML = '<a href="https://www.conseq.cz/investice/prehled-fondu/zdr-public-podfond-real-estate-czk" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Investika realitn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://moje.investika.cz/investicni-fondy/investika-realitni-fond" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Conseq realitn√≠ fond  üí¨")) {
                span.innerHTML = '<a href="https://www.conseq.cz/investice/prehled-fondu/conseq-realitni-czk" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Investika realitn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://moje.investika.cz/investicni-fondy/investika-realitni-fond" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Trigea nemovitostn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://www.trigea.cz/vykonnost-fondu/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Czech Real Estate Investment Fund üí¨")) {
                span.innerHTML = '<a href="https://czech-fund.cz/?gclid=Cj0KCQjwqP2pBhDMARIsAJQ0Czrqg-EQZUlar2E-mo6rMFR6DnGGOFySgm4zgFQrsx7Ne5jiOeVlQVgaApNaEALw_wcB" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("REICO ƒåS Nemovitostn√≠ üí¨")) {
                span.innerHTML = '<a href="https://www.reico.cz/cs/cs-nemovitostni-fond" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("REICO ƒåS Long Lease  üí¨")) {
                span.innerHTML = '<a href="https://www.reico.cz/cs/long-lease-fond" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("TESLA Realita nemovitostn√≠ fond üí¨")) {
                span.innerHTML = '<a href="https://www.atrisinvest.cz/fond-realita/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Amundi Realti  üí¨")) {
                span.innerHTML = '<a href="https://www.amundi.cz/produkty" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            }
            // P≈ôid√°n√≠ onclick atributu pro okam≈æit√© otev≈ôen√≠ odkazu p≈ôi kliknut√≠
            span.querySelector('a').setAttribute('onclick', 'window.open(this.href); return false;');
            cont = entry.parentElement;
            cont.insertBefore(span, entry);
            console.log("inserted");

        }
    });
    observer.observe(portal, {childList: true});
};
add_navigator_to_portal(parent.window.document)
</script>
""")

# Script to add links
html("""
<script>
function add_navigator_to_portal(doc) {
    portal = doc.getElementById('portal');
    observer = new MutationObserver(function(mutations, observer) {
        let entry = portal.querySelector('.clip-region');
        if (entry) {
            let text = entry.textContent;
            let span = document.createElement('span');
            span.className = "portal-navigator";
            if (text.includes("WOOD & Company podfond Retail üí¨")) {
                span.innerHTML = '<a href="https://wood.cz/produkty/fondy/retail-podfond/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Jet Industrial Lease üí¨")) {
                span.innerHTML = '<a href="https://www.jetinvestment.cz/fondy-jet/jet-industrial-lease/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("REALIA FUND SICAV, a.s. REALIA Podfond Retail Parks üí¨")) {
                span.innerHTML = '<a href="https://www.avantfunds.cz/cs/fondy/realia-fund-sicav-a-s/realia-podfond-retail-parks/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("WOOD & Company Office üí¨")) {
                span.innerHTML = '<a href="https://wood.cz/produkty/fondy/office-podfond/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Silverline Real Estate üí¨")) {
                span.innerHTML = '<a href="https://silverlinere.com/cs" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Fond ƒåesk√©ho bydlen√≠  üí¨")) {
                span.innerHTML = '<a href="https://www.fondbydleni.cz/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Accolade Industrial Fund A2 Dis (CZK) üí¨")) {
                span.innerHTML = '<a href="https://accolade.eu/domains/accolade.eu/cs/fond?gclid=Cj0KCQjwqP2pBhDMARIsAJQ0CzrdKx3tzR9Qf1ABf2hfJEG-JcTnwooKnt2HdcZf2JlJfluSd37ii28aAphTEALw_wcB" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("ZDR Investments Real Estate FKI üí¨")) {
                span.innerHTML = '<a href="https://www.zdrinvestments.cz/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("TRIKAYA nemovitostn√≠ fond SICAV, a.s. üí¨")) {
                span.innerHTML = '<a href="https://fond.trikaya.cz/" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("Nova Real Estate üí¨")) {
                span.innerHTML = '<a href="https://www.redsidefunds.com/cs/fondy/nova-real-estate" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            } else if (text.includes("DOMOPLAN SICAV, a.s.  üí¨")) {
                span.innerHTML = '<a href="https://www.domoplan.eu/cs/investice/domoplan-sicav-a-s-6MDviG" target="_blank" >Zobrazit podrobnosti o fondu</a>';
            }
            // P≈ôid√°n√≠ onclick atributu pro okam≈æit√© otev≈ôen√≠ odkazu p≈ôi kliknut√≠
            span.querySelector('a').setAttribute('onclick', 'window.open(this.href); return false;');
            cont = entry.parentElement;
            cont.insertBefore(span, entry);
            console.log("inserted");

        }
    });
    observer.observe(portal, {childList: true});
};
add_navigator_to_portal(parent.window.document)
</script>
""")

